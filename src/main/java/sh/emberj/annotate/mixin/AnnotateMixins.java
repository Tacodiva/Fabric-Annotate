package sh.emberj.annotate.mixin;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.objectweb.asm.Type;
import org.spongepowered.asm.mixin.MixinEnvironment;
import org.spongepowered.asm.mixin.Mixins;
import org.spongepowered.include.com.google.common.io.Files;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import net.fabricmc.loader.impl.launch.FabricLauncherBase;
import sh.emberj.annotate.core.Annotate;
import sh.emberj.annotate.core.AnnotateException;
import sh.emberj.annotate.mixin.asm.DynamicMixinClass;

public class AnnotateMixins {

    private AnnotateMixins() {
    }

    private static final String MIXINS_JSON_NAME = "annotate.codegen.mixins.json";
    private static final String MIXINS_PACKAGE_NAME = "sh.emberj.annotate.generated";
    private static final String MIXINS_PACKAGE_INTERNAL = MIXINS_PACKAGE_NAME.replace('.', '/');

    private static Map<String, DynamicMixinClass> _classes = new HashMap<>();

    static DynamicMixinClass getMixinClass(Type target) {
        DynamicMixinClass clazz = _classes.get(target.toString());
        if (clazz == null) {
            clazz = new DynamicMixinClass(target, MIXINS_PACKAGE_INTERNAL + "/" + generateClassName(target));
            _classes.put(target.toString(), clazz);
        }
        return clazz;
    }

    public static void runMixins() throws AnnotateException {
        long startTime = System.currentTimeMillis();
        if (_classes == null)
            throw new AnnotateException("Already ran the mixins!");
        if (_classes.isEmpty())
            return;
        File codegen;
        try {
            File annotateFolder = Annotate.getAnnotateDirectory();
            codegen = new File(annotateFolder, "codegen");
            FileUtils.deleteDirectory(codegen);

            codegen.mkdir();

            File codePackage = new File(codegen, MIXINS_PACKAGE_INTERNAL);
            codePackage.mkdirs();

            {
                JsonObject mixinsJson = new JsonObject();

                mixinsJson.addProperty("required", true);
                mixinsJson.addProperty("minVersion", "0.8");
                mixinsJson.addProperty("package", MIXINS_PACKAGE_NAME);
                mixinsJson.addProperty("compatibilityLevel", "JAVA_17");

                JsonArray mixins = new JsonArray();
                for (DynamicMixinClass clazz : _classes.values()) {
                    mixins.add(getSimpleClassName(getSimpleClassName(clazz.getClassName())));
                }
                mixinsJson.add("mixins", mixins);

                JsonObject injectors = new JsonObject();
                injectors.addProperty("defaultRequire", 1);
                mixinsJson.add("injectors", injectors);

                String contents = mixinsJson.toString();
                contents = "// Automatically generated by " + Annotate.getBranding() + "\n" + contents;

                Files.write(contents.getBytes(), new File(codegen, MIXINS_JSON_NAME));
            }

            for (DynamicMixinClass clazz : _classes.values()) {
                byte[] bytecode = clazz.generateBytecode();
                String className = getSimpleClassName(clazz.getClassName());
                Files.write(bytecode, new File(codePackage, className + ".class"));
                Annotate.LOG.info("Codegen: Wrote " + className);
            }
        } catch (IOException e) {
            throw new AnnotateException("Error while writing generated files to disk.", e);
        }

        try {
            // This is actually an instance of KnotClassLoader.DynamicURLClassLoader
            ClassLoader fabricRootClassLoader = FabricLauncherBase.getLauncher().getTargetClassLoader().getParent();
            Class<?> dynamicURLClassLoader = Class
                    .forName("net.fabricmc.loader.impl.launch.knot.KnotClassLoader$DynamicURLClassLoader");
            Method method = dynamicURLClassLoader.getDeclaredMethod("addURL", new Class[] { URL.class });
            method.setAccessible(true);
            method.invoke(fabricRootClassLoader, new Object[] { codegen.toURI().toURL() });
            Annotate.LOG.info("Codegen: Injected URL into classpath");
        } catch (Exception e) {
            throw new AnnotateException("Error while injecting URL into classpath.", e);
        }

        Mixins.addConfiguration(MIXINS_JSON_NAME);

        try {
            Method m = MixinEnvironment.class.getDeclaredMethod("gotoPhase", MixinEnvironment.Phase.class);
            m.setAccessible(true);
            m.invoke(null, MixinEnvironment.Phase.INIT);
            m.invoke(null, MixinEnvironment.Phase.DEFAULT);
        } catch (Exception e) {
            throw new AnnotateException("Error while performing mixins.", e);
        }

        Annotate.LOG.info("Codegen: Finished writing " + _classes.size() + " classes in "
                + (System.currentTimeMillis() - startTime) + " ms");
        _classes = null;
    }

    private static int classUniquifier = 0;

    private static String generateClassName(Type target) {
        String mainClassBit = getSimpleClassName(target.getClassName());
        mainClassBit = mainClassBit.replace('+', '$').replace('-', '$');
        return mainClassBit + (classUniquifier++);
    }

    private static String getSimpleClassName(String fullName) {
        String[] classBits = fullName.split("\\.");
        classBits = classBits[classBits.length - 1].split("/");
        return classBits[classBits.length - 1];
    }

}
